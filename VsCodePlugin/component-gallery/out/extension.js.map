{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/panels/ComponentGalleryPanel.ts", "../src/utilities/getUri.ts", "../src/utilities/getNonce.ts", "../src/panels/demos/template.ts"],
  "sourcesContent": ["import { commands, ExtensionContext } from \"vscode\";\nimport { ComponentGalleryPanel } from \"./panels/ComponentGalleryPanel\";\n\nexport function activate(context: ExtensionContext) {\n  // Create the show gallery command\n  const showGalleryCommand = commands.registerCommand(\"antora.createModule\", () => {\n    ComponentGalleryPanel.render(context.extensionUri);\n  });\n\n  //Test\n  context.subscriptions.push(showGalleryCommand);\n}\n", "import { Disposable, Webview, WebviewPanel, window, Uri, ViewColumn } from \"vscode\";\nimport { getUri } from \"../utilities/getUri\";\nimport { getNonce } from \"../utilities/getNonce\";\nimport { buttonDemo } from \"./demos/button\";\nimport { checkboxDemo } from \"./demos/checkbox\";\nimport { dataGridDemo } from \"./demos/data-grid\";\nimport { dropdownDemo } from \"./demos/template\";\nimport { panelsDemo } from \"./demos/panels\";\nimport { radioGroupDemo } from \"./demos/radio-group\";\nimport { tagDemo } from \"./demos/tag\";\nimport { textAreaDemo } from \"./demos/text-area\";\nimport { textFieldDemo } from \"./demos/text-field\";\n\n/**\n * This class manages the state and behavior of ComponentGallery webview panels.\n *\n * It contains all the data and methods for:\n *\n * - Creating and rendering ComponentGallery webview panels\n * - Properly cleaning up and disposing of webview resources when the panel is closed\n * - Setting the HTML (and by proxy CSS/JavaScript) content of the webview panel\n */\nexport class ComponentGalleryPanel {\n  public static currentPanel: ComponentGalleryPanel | undefined;\n  private readonly _panel: WebviewPanel;\n  private _disposables: Disposable[] = [];\n\n  /**\n   * The ComponentGalleryPanel class private constructor (called only from the render method).\n   *\n   * @param panel A reference to the webview panel\n   * @param extensionUri The URI of the directory containing the extension\n   */\n  private constructor(panel: WebviewPanel, extensionUri: Uri) {\n    this._panel = panel;\n\n    // Set an event listener to listen for when the panel is disposed (i.e. when the user closes\n    // the panel or when the panel is closed programmatically)\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n    // Set the HTML content for the webview panel\n    this._panel.webview.html = this._getWebviewContent(this._panel.webview, extensionUri);\n  }\n\n  /**\n   * Renders the current webview panel if it exists otherwise a new webview panel\n   * will be created and displayed.\n   *\n   * @param extensionUri The URI of the directory containing the extension.\n   */\n  public static render(extensionUri: Uri) {\n    if (ComponentGalleryPanel.currentPanel) {\n      // If the webview panel already exists reveal it\n      ComponentGalleryPanel.currentPanel._panel.reveal(ViewColumn.One);\n    } else {\n      // If a webview panel does not already exist create and show a new one\n      const panel = window.createWebviewPanel(\n        // Panel view type\n        \"createModule\",\n        // Panel title\n        \"Create Module\",\n        // The editor column the panel should be displayed in\n        ViewColumn.One,\n        // Extra panel configurations\n        {\n          // Enable JavaScript in the webview\n          enableScripts: true,\n          // Restrict the webview to only load resources from the `out` directory\n          localResourceRoots: [Uri.joinPath(extensionUri, \"out\")],\n        }\n      );\n\n      ComponentGalleryPanel.currentPanel = new ComponentGalleryPanel(panel, extensionUri);\n    }\n  }\n\n  /**\n   * Cleans up and disposes of webview resources when the webview panel is closed.\n   */\n  public dispose() {\n    ComponentGalleryPanel.currentPanel = undefined;\n\n    // Dispose of the current webview panel\n    this._panel.dispose();\n\n    // Dispose of all disposables (i.e. commands) associated with the current webview panel\n    while (this._disposables.length) {\n      const disposable = this._disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n\n  /**\n   * Defines and returns the HTML that should be rendered within the webview panel.\n   *\n   * @remarks This is also the place where *references* to CSS and JavaScript files\n   * are created and inserted into the webview HTML.\n   *\n   * @param webview A reference to the extension webview\n   * @param extensionUri The URI of the directory containing the extension\n   * @returns A template string literal containing the HTML that should be\n   * rendered within the webview panel\n   */\n  private _getWebviewContent(webview: Webview, extensionUri: Uri) {\n    const webviewUri = getUri(webview, extensionUri, [\"out\", \"webview.js\"]);\n    const styleUri = getUri(webview, extensionUri, [\"out\", \"style.css\"]);\n    const codiconUri = getUri(webview, extensionUri, [\"out\", \"codicon.css\"]);\n    const nonce = getNonce();\n\n    // Note: Since the below HTML is defined within a JavaScript template literal, all of\n    // the HTML for each component demo can be defined elsewhere and then imported/inserted\n    // into the below code. This can help with code readability and organization.\n    //\n    // Tip: Install the es6-string-html VS Code extension to enable code highlighting below\n    return /*html*/ `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; style-src ${webview.cspSource}; font-src ${webview.cspSource}; script-src 'nonce-${nonce}';\">\n          <link rel=\"stylesheet\" href=\"${styleUri}\">\n          <link rel=\"stylesheet\" href=\"${codiconUri}\">\n          <title>Create Module</title>\n        </head>\n        <body>\n          <h1>Create Module</h1>\n          <section class=\"component-row\">\n            ${dropdownDemo}\n          </section>\n          \n          <script type=\"module\" nonce=\"${nonce}\" src=\"${webviewUri}\"></script>\n        </body>\n      </html>\n    `;\n  }\n}\n", "import { Uri, Webview } from \"vscode\";\n\n/**\n * A helper function which will get the webview URI of a given file or resource.\n *\n * @remarks This URI can be used within a webview's HTML as a link to the\n * given file/resource.\n *\n * @param webview A reference to the extension webview\n * @param extensionUri The URI of the directory containing the extension\n * @param pathList An array of strings representing the path to a file/resource\n * @returns A URI pointing to the file/resource\n */\nexport function getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n  return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n}\n", "/**\n * A helper function that returns a unique alphanumeric identifier called a nonce.\n *\n * @remarks This function is primarily used to help enforce content security\n * policies for resources/scripts being executed in a webview context.\n *\n * @returns A nonce\n */\nexport function getNonce() {\n  let text = \"\";\n  const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n", "export const dropdownDemo = /*html*/ `\n  <section class=\"component-container\">\n    <h2>Template</h2>\n    <section class=\"component-example\">\n      <p>Default Dropdown</p>\n      <vscode-dropdown position=\"below\">\n        <vscode-option>Template #1</vscode-option>\n        <vscode-option>Template #2</vscode-option>\n        <vscode-option>Template #3</vscode-option>\n      </vscode-dropdown>\n      <h2>Text</h2>\n    <section class=\"component-example\">\n      <vscode-text-field>Text Field Label</vscode-text-field>\n    </section>\n    <section class=\"component-example\">\n      <p>Default Radio Group</p>\n      <vscode-radio-group>\n        <label slot=\"label\">Group Label</label>\n        <vscode-radio value=\"value-1\">Label</vscode-radio>\n        <vscode-radio value=\"value-2\">Label</vscode-radio>\n        <vscode-radio value=\"value-3\">Label</vscode-radio>\n      </vscode-radio-group>\n    </section>\n    <section class=\"component-example\">\n      <vscode-button appearance=\"primary\">Create</vscode-button>\n    </section>\n    \n\n    </section>\n\n  </section>\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,iBAA2C;;;ACA3C,IAAAC,iBAA2E;;;ACA3E,oBAA6B;AAatB,SAAS,OAAO,SAAkB,cAAmB,UAAoB;AAC9E,SAAO,QAAQ,aAAa,kBAAI,SAAS,cAAc,GAAG,QAAQ,CAAC;AACrE;;;ACPO,SAAS,WAAW;AACzB,MAAI,OAAO;AACX,QAAM,WAAW;AACjB,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,YAAQ,SAAS,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,SAAS,MAAM,CAAC;AAAA,EACrE;AACA,SAAO;AACT;;;ACfO,IAAM,eAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AHsB9B,IAAM,wBAAN,MAA4B;AAAA,EAWzB,YAAY,OAAqB,cAAmB;AAR5D,SAAQ,eAA6B,CAAC;AASpC,SAAK,SAAS;AAId,SAAK,OAAO,aAAa,MAAM,KAAK,QAAQ,GAAG,MAAM,KAAK,YAAY;AAGtE,SAAK,OAAO,QAAQ,OAAO,KAAK,mBAAmB,KAAK,OAAO,SAAS,YAAY;AAAA,EACtF;AAAA,EAQA,OAAc,OAAO,cAAmB;AACtC,QAAI,sBAAsB,cAAc;AAEtC,4BAAsB,aAAa,OAAO,OAAO,0BAAW,GAAG;AAAA,IACjE,OAAO;AAEL,YAAM,QAAQ,sBAAO;AAAA,QAEnB;AAAA,QAEA;AAAA,QAEA,0BAAW;AAAA,QAEX;AAAA,UAEE,eAAe;AAAA,UAEf,oBAAoB,CAAC,mBAAI,SAAS,cAAc,KAAK,CAAC;AAAA,QACxD;AAAA,MACF;AAEA,4BAAsB,eAAe,IAAI,sBAAsB,OAAO,YAAY;AAAA,IACpF;AAAA,EACF;AAAA,EAKO,UAAU;AACf,0BAAsB,eAAe;AAGrC,SAAK,OAAO,QAAQ;AAGpB,WAAO,KAAK,aAAa,QAAQ;AAC/B,YAAM,aAAa,KAAK,aAAa,IAAI;AACzC,UAAI,YAAY;AACd,mBAAW,QAAQ;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AAAA,EAaQ,mBAAmB,SAAkB,cAAmB;AAC9D,UAAM,aAAa,OAAO,SAAS,cAAc,CAAC,OAAO,YAAY,CAAC;AACtE,UAAM,WAAW,OAAO,SAAS,cAAc,CAAC,OAAO,WAAW,CAAC;AACnE,UAAM,aAAa,OAAO,SAAS,cAAc,CAAC,OAAO,aAAa,CAAC;AACvE,UAAM,QAAQ,SAAS;AAOvB,WAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAM0E,QAAQ,uBAAuB,QAAQ,gCAAgC;AAAA,yCAC5H;AAAA,yCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAM3B;AAAA;AAAA;AAAA,yCAG2B,eAAe;AAAA;AAAA;AAAA;AAAA,EAItD;AACF;;;ADvIO,SAAS,SAAS,SAA2B;AAElD,QAAM,qBAAqB,wBAAS,gBAAgB,uBAAuB,MAAM;AAC/E,0BAAsB,OAAO,QAAQ,YAAY;AAAA,EACnD,CAAC;AAGD,UAAQ,cAAc,KAAK,kBAAkB;AAC/C;",
  "names": ["import_vscode", "import_vscode"]
}
