{
  "name": "esbuild-plugin-copy",
  "version": "2.0.1",
  "description": "ESBuild plugin for assets copy.",
  "keywords": [
    "esbuild",
    "ESBuild",
    "copy",
    "plugin"
  ],
  "homepage": "https://github.com/LinbuduLab/esbuild-plugins/tree/master/packages/esbuild-plugin-copy#readme",
  "changelog": "https://github.com/LinbuduLab/esbuild-plugins/blob/main/packages/esbuild-plugin-copy/CHANGELOG.md",
  "bugs": {
    "url": "https://github.com/LinbuduLab/esbuild-plugins/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/LinbuduLab/esbuild-plugins.git"
  },
  "license": "MIT",
  "author": "Linbudu <linbudu599@gmail.com> (https://github.com/linbudu599)",
  "main": "dist/index.js",
  "typings": "dist/index.d.ts",
  "exports": {
    ".": {
      "require": "./dist/index.js",
      "import": "./dist/index.mjs",
      "types": "./dist/index.d.ts"
    }
  },
  "dependencies": {
    "chalk": "^4.1.2",
    "fs-extra": "^10.0.1",
    "globby": "^11.0.3"
  },
  "peerDependencies": {
    "esbuild": ">= 0.14.0"
  },
  "scripts": {
    "dev": "tsup src/index.ts --watch --dts --format esm",
    "build": "rm -rf dist && tsup src/index.ts --config ../../tsup.config.ts"
  },
  "readme": "# esbuild-plugin-copy\n\nESBuild plugin for assets copy.\n\n- [Author](https://github.com/linbudu599)\n- [GitHub Repo](https://github.com/LinbuduLab/esbuild-plugins/tree/master/packages/esbuild-plugin-copy#readme)\n- [Changelog](https://github.com/LinbuduLab/esbuild-plugins/blob/main/packages/esbuild-plugin-copy/CHANGELOG.md)\n\n## Features\n\n- Keep copied assets file structure\n- Control assets destination path freely\n- Support verbose output log\n- Run only once or only when assets changed\n\n## Usage\n\n```bash\nnpm install esbuild-plugin-copy --save-dev\npnpm install esbuild-plugin-copy --save-dev\nyarn add esbuild-plugin-copy --save-dev\n```\n\n```typescript\nimport { build } from 'esbuild';\nimport { copy } from 'esbuild-plugin-copy';\n\n(async () => {\n  const res = await build({\n    entryPoints: ['./src/main.ts'],\n    bundle: true,\n    outfile: './dist/main.js',\n    plugins: [\n      copy({\n        // this is equal to process.cwd(), which means we use cwd path as base path to resolve `to` path\n        // if not specified, this plugin uses ESBuild.build outdir/outfile options as base path.\n        resolveFrom: 'cwd',\n        assets: {\n          from: ['./assets/*'],\n          to: ['./assets', './tmp-assets'],\n        },\n      }),\n    ],\n  });\n})();\n```\n\n### Keep file structure\n\n```typescript\nimport { copy } from 'esbuild-plugin-copy';\nimport { build } from 'esbuild';\n\n(async () => {\n  const res = await build({\n    entryPoints: ['./src/index.ts'],\n    bundle: true,\n    // as resolveFrom not set, we use dist as output base dir\n    outfile: './dist/main.js',\n    watch: true,\n    plugins: [\n      copy({\n        assets: [\n          {\n            from: ['./node_modules/tinymce/skins/**/*'],\n            to: ['./dest/skins'],\n          },\n        ],\n      }),\n    ],\n  });\n})();\n```\n\nFile structure will be kept:\n\n```text\n|-node_modules/tinymce/skins\n|--- content\n|----- dark\n|----- default\n|----- document\n|--- ui\n|----- oxide\n|----- oxide-dark\n```\n\n```text\n|- dist/dest/skins\n|--- content\n|----- dark\n|----- default\n|----- document\n|--- ui\n|----- oxide\n|----- oxide-dark\n```\n\nYou can also use patterns with extension names like `./path/**/*.js`.\n\n## File Glob\n\nNote: This plugin doesnot expand directories by default, which means when you're using pattern `dir/*` or `dir/*.*` , you will only get the file inside `dir/` like `dir/index.md`. If you want to match the nested files like `dir/path/to/index.md`, you will need to use pattern like `dir/**/*`.\n\nIf you're using `dir/*` and there are no files under this directory, you will got an warning:\n\n```bash\ni No files matched using current glob pattern: ./node_modules/tinymce/skins/*, maybe you need to configure globby by options.globbyOptions?\n```\n\n## Configurations\n\n```typescript\nimport type { GlobbyOptions } from 'globby';\n\nexport type MaybeArray<T> = T | T[];\n\n// file/folder/globs\nexport interface AssetPair {\n  /**\n   * from path is resolved based on `cwd`\n   */\n  from: MaybeArray<string>;\n\n  /**\n   * to path is resolved based on `outdir` or `outfile` in your ESBuild options by default\n   * you can also set `resolveFrom` to change the base dir\n   */\n  to: MaybeArray<string>;\n}\n\nexport interface Options {\n  /**\n   * assets pair to copy\n   * @default []\n   */\n  assets: MaybeArray<AssetPair>;\n\n  /**\n   * execute copy in `ESBuild.onEnd` hook(recommended)\n   *\n   * set to true if you want to execute in onStart hook\n   * @default false\n   */\n  copyOnStart: boolean;\n\n  /**\n   * enable verbose logging\n   *\n   * outputs from-path and to-path finally passed to `fs.copyFileSync` method\n   * @default false\n   */\n  verbose: boolean;\n\n  /**\n   * options passed to `globby` when we 're globbing for files to copy\n   * @default {}\n   */\n  globbyOptions: GlobbyOptions;\n\n  /**\n   * only execute copy operation once\n   *\n   * useful when you're using ESBuild.build watching mode\n   * @default false\n   */\n  once: boolean;\n\n  /**\n   * base path used to resolve relative `assets.to` path\n   * by default this plugin use `outdir` or `outfile` in your ESBuild options\n   * you can specify \"cwd\" or process.cwd() to resolve from current working directory,\n   * also, you can specify somewhere else to resolve from.\n   * @default \"out\"\n   */\n  resolveFrom: 'cwd' | 'out' | string;\n\n  /**\n   * use dry run mode to see what's happening.\n   *\n   * by default, enable this option means enable `verbose` option in the same time\n   *\n   * @default false\n   */\n  dryRun?: boolean;\n}\n```\n"
}